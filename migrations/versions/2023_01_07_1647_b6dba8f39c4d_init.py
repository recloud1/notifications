"""init

Revision ID: b6dba8f39c4d
Revises: 
Create Date: 2023-01-07 16:47:16.781685

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b6dba8f39c4d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp" ')
    op.execute("CREATE SCHEMA notifications")

    op.create_table(
        "recurrences",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "frequency",
            sa.Enum(
                "YEARLY",
                "MONTHLY",
                "WEEKLY",
                "DAILY",
                "HOURLY",
                "MINUTELY",
                "SECONDLY",
                name="frequencies",
            ),
            nullable=False,
            comment="Частота повторения оповещения",
        ),
        sa.Column(
            "started_at",
            sa.DateTime(),
            nullable=False,
            comment="Дата, начиная с которой будут повторяться оповещения",
        ),
        sa.Column(
            "interval",
            sa.Integer(),
            nullable=False,
            comment="Интервал между каждой итерацией повторения",
        ),
        sa.Column(
            "count",
            sa.Integer(),
            nullable=True,
            comment="Сколько раз должно повториться оповещение (если данный параметр указан, то дополнительно вычисляется until)",
        ),
        sa.Column(
            "until",
            sa.DateTime(),
            nullable=True,
            comment="Дата, до которой оповещения будет повторяться",
        ),
        sa.Column(
            "week_days",
            postgresql.ARRAY(sa.Integer()),
            nullable=True,
            comment="Дни недели, в которые будет применяться повторение",
        ),
        sa.Column(
            "additional_dates",
            postgresql.ARRAY(sa.DateTime()),
            nullable=True,
            comment="Дополнительные даты оповещений, которые не входят в основное правило",
        ),
        sa.Column(
            "exclude_dates",
            postgresql.ARRAY(sa.DateTime()),
            nullable=True,
            comment="Даты, которые нужно исключить из основного правила",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_recurrences")),
        schema="notifications",
        comment="правила повторения оповещения",
    )
    op.create_table(
        "templates",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "slug",
            sa.String(length=128),
            nullable=False,
            comment="Уникальное название для шаблона",
        ),
        sa.Column("name", sa.String(length=512), nullable=False),
        sa.Column("title", sa.String(length=256), nullable=False),
        sa.Column(
            "is_base",
            sa.Boolean(),
            nullable=False,
            comment="Является ли шаблон базовым",
        ),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("variables", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "search_params",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Все поля доп. фильтрации",
        ),
        sa.Column("created_by", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("updated_by", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_templates")),
        schema="notifications",
    )
    op.create_table(
        "notifications",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "contacts",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Словарь с данными для отправки уведомлений во всех backend'ах",
        ),
        sa.Column(
            "template_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("template_id", sa.Integer(), nullable=False),
        sa.Column(
            "recurrence_id",
            sa.Integer(),
            nullable=True,
            comment="Правила повторения для регулярных оповещений",
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["recurrence_id"],
            ["notifications.recurrences.id"],
            name=op.f("fk_notifications_recurrence_id_recurrences"),
        ),
        sa.ForeignKeyConstraint(
            ["template_id"],
            ["notifications.templates.id"],
            name=op.f("fk_notifications_template_id_templates"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notifications")),
        schema="notifications",
    )
    op.create_index(
        op.f("ix_notifications_notifications_template_id"),
        "notifications",
        ["template_id"],
        unique=False,
        schema="notifications",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_notifications_notifications_template_id"),
        table_name="notifications",
        schema="notifications",
    )
    op.drop_table("notifications", schema="notifications")
    op.drop_table("templates", schema="notifications")
    op.drop_table("recurrences", schema="notifications")

    op.execute("DROP SCHEMA notifications")
    # ### end Alembic commands ###
